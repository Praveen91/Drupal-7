Daily Tips and Trick for Drupal
-------------------------------
Add Content to a Region Programmatically
Programmatically adding content to a region. I did this in hook_page_preprocess_page().
$variables['page']['rows_abovesidebar'][]['#markup'] = '<p>My html...</p>';



/**
 * Implements hook_token_info().
 */
function campusmate_views_token_info() {

  // Add tokens.
  $view['subject_name'] = array(
    'name' => t('Subject Details page title'),
    'description' => t('Page title for Subject Details page'),
  );

   $view['tutor_name'] = array(
    'name' => t('Tutor Name'),
    'description' => t('Tutor name for page title'),
  );

  return array(
    'tokens' => array(
      'view' => $view,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function campusmate_views_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();

 if ($type == 'view') {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'subject_name':
       if ( arg(0) == 'subjectdetail' && is_numeric(arg(1))) {
          $tid = arg(1);
          $term = taxonomy_term_load($tid);
          $sub_term_name = $term->name;
          $replacements[$original] = $sub_term_name;
        }
          break;
          case 'tutor_name':
          if ( arg(0) == 'tutor-details' && is_numeric(arg(1))) {
            $tutor_id = arg(1);
            $tutor_profile = profile2_by_uid_load($tutor_id, 'tutor_profile');
            $profile_wrapper = entity_metadata_wrapper('profile2', $tutor_profile);
            $raw_collection = $profile_wrapper->field_personal_information->value();
            $fname = $raw_collection->field_tutor_first_name['und'][0]['value'];
            $lname = $raw_collection->field_tutor_last_name['und'][0]['value'];
            $lname = substr($lname,0,1);
            $tutor_short_name  = $fname .' '. $lname . '.';
            $replacements[$original] = $tutor_short_name;
          }
            break;
      }
    }
  }

  // Return the replacements.
  return $replacements;
}



Custom add to cart using ajax call
----------------------------------

HTML code : with classroom_id and product_id
<div name="126" rel="100" class="card-time go-to-checkout">0:00:00h</div>

Js code : onclick we get values of classroom_id and product_id.
          using ajax call we pass this hook_menu to callback fuction
    /**
     * Add Time event.
     */
    Drupal.behaviors.addTime = {
        attach: function (context) {
            jQuery('.go-to-checkout', context).click(function () {
                // Call ajax.
                var class_id = jQuery(this).attr("name");
                var pack_id = jQuery(this).attr("rel");

                jQuery.ajax({
                    url: Drupal.settings.basePath + 'add_to_checkout',
                    type: 'POST',
                    data: "pack_id=" + pack_id +"&class_id="+class_id,
                    success: function (result) {
                        window.location = Drupal.settings.basePath + 'checkout';
                    },
                });
            });
        }
    };


PHP and Drupal
--------------
/**
 * Implements hook_menu().
 */
function mymodule_menu() {
$items['add_to_checkout'] = [
    'title' => 'Add to checkout',
    'page callback' => 'campus_add_to_checkout',
    'access arguments' => ['access content'],
    'type' => MNEU_CALLBACK
  ];
  return $items;
}



/**
 * Callback function campus_add_to_checkout().
 */
function campus_add_to_checkout(){
    
    global $user;
    
    $classroom_id = $_POST['class_id'];
    $product_id = $_POST['pack_id'];
    $quantity   = 1;
    if ($product = commerce_product_load($product_id)) {
        
    $line_item = commerce_product_line_item_new($product, $quantity);
    $line_item->field_classroom_id[LANGUAGE_NONE][0]['value'] = $classroom_id;
    drupal_alter('commerce_product_calculate_sell_price_line_item', $line_item);
    
    rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
    
    commerce_marketplace_cart_product_add($user->uid, $line_item, TRUE);
    
    #drupal_goto('checkout');
  }
  else {
    drupal_set_message(t('Error occured during adding product to cart! Try to use Add to cart button.'));
  }
    echo "success";
}



/**
 * Implements hook_menu().
 */
function campusmate_views_menu() {

  $items['tutor/subject/field_select_subjects'] = array(
   'title' => 'Autocomplete deluxe taxonomy',
    'page callback' => 'autocomplete_tutor_subject_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    
  $items['papers_pub_search/keywords_autocomplete'] = array(
   'title' => 'Autocomplete deluxe taxonomy',
    'page callback' => '_autosearch',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  );

  return $items;
}


Cuastom Callback fuction for autocomplete_deluxe 
------------------------------------------------

/**
 * Implements hook_menu().
 */
function campusmate_views_menu() {

  $items['tutor/subject/field_select_subjects'] = array(
   'title' => 'Autocomplete deluxe taxonomy',
    'page callback' => 'autocomplete_tutor_subject_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,

  );

  return $items;
}



/**
 * Implements hook_form_alter().
 * @see http://drupal.org/node/1079826 for more information on this code.
 */
function campusmate_views_form_alter(&$form, $form_state, $form_id) {

if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'tutor_listing') {

    $form['field_select_subjects_tid'] = array(
    '#type' => 'autocomplete_deluxe',
    '#autocomplete_deluxe_path' => url('tutor/subject/field_select_subjects'),
    '#multiple' => TRUE,
    '#autocomplete_min_length' => 0,
    '#autocomplete_multiple_delimiter' => ',',
    );
    //kpr($form);
   }
}

For only autocomlete ::

$form['field_select_subjects_tid'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'tutor/subject/field_select_subjects',
    );

function autocomplete_tutor_subject_callback($string = "") {

  $query = db_select('taxonomy_term_data', 'ttd');
  $query->distinct();
  $query->fields('ttd', array('tid', 'name'));
  $query->join('field_data_field_select_subjects', 'sub_tid', 'ttd.tid = sub_tid.field_select_subjects_tid');
  $query->condition('sub_tid.bundle', 'tutors_packs');
  //$query->condition('ttd.name', db_like($string) . '%', 'LIKE');
  $query->range(0, 10);
  $result = $query->execute()->fetchAll();
    foreach ($result as $subject) {
      $matches[$subject->name . ""] = check_plain($subject->name);
    }
    drupal_json_output($matches);
}

$form['keywords'] = array(
  '#type' => 'textfield',
  '#title' => t('Keywords'),
  '#size' => '40',
  '#multiple' => TRUE,
  '#autocomplete_path' => 'papers_pub_search/keywords_autocomplete'
);

function _autosearch($string) {
  $matches = array();

  if ($string) {
    $items = array_map('trim', explode(',', $string));
    $last_item = array_pop($items);
    $prefix = implode(', ', $items);

    $result = db_select('users')
       ->fields('users', array('name'))
       ->condition('name', '%' . db_like($last_item) . '%', 'LIKE')
       ->range(0, 10)->execute();
    foreach ($result as $user) {
      $value = !empty($prefix) ? $prefix . ', ' . $user->name : $user->name;
      $matches[$value] = check_plain($value);
    }
  }

  drupal_json_output($matches);
}


How to attach profile2 fields in custom form :
----------------------------------------------

global $user;
  if (!isset($form_state['profile'])) {
    $profile = profile2_load_by_user($user, 'profile_machine_name');
    if (!$profile) {
      $profile = profile_create(array(
        'type' => 'profile_machine_name',
        'uid' => $user->uid
      ));
    }
    $form_state['profiles'][$profile->type] = $profile;
  }

    // Use field attach form and handle the fields yourself:
    //field_attach_form('profile2', $profile, $form, $form_state);
    // Or use profile2 API which is simpler
     profile2_attach_form($form, $form_state);




Creating tables relations in Views programmatically :
----------------------------------------------------


/**
 *  Implements hook_views_data_alter()
 */
 
Example one

function you_module_views_data_alter(&$data) {
  $data['the_name_of_your_custom_table']['the_name_of_your_custom_table'] = array(
    'title' => t('This is what you see on Relationships Views area'),
    'help' => t('A sentence to help the user explain what is this.'),
    // here where the magic begins
    'relationship' => array(
      'base' => 'users',  // the core table that you join in.
      'base field' => 'uid',  // the field name of the core table that make the relation.
      'field' => 'my_custom_id',  // the field name of YOUR table related with the core table.
      'handler' => 'views_handler_relationship',  // default
      'label' => t('UID vs my custom table.'),  // Some text showed on the Views Fields area. 
    ),
  );		
}

Example two

// Two tables pm_message , pm_index

function timekit_api_views_data() {
   $data = array();
$data['pm_message']['mid'] = array(
     'title' => t('pm_message'),
     'relationship' => array(
       'base' => 'pm_index',
       'base field' => 'mid',
       'handler' => 'views_handler_relationship',
       'label' => t('pm_index'),
     ),
   );
   
   
   return $data;
}

Drupal snippets code : 
http://dropbucket.org/node/6738

https://www.thirdandgrove.com/creating-a-custom-views-relationship-for-drupal-commerce-orders



What are Drupal Behaviors?
---------------------------
Drupal has a behaviors’ system to provide 
better way for attaching JavaScript functionality to place elements on a page
Drupal Behaviors allows you to override or extend the existing behavior.

Drupal 7 has two handles:

• To add an element to a page, you use ‘attach’

• To remove an element, you use ‘detach’

settings:
The use of settings is to pass values from PHP to Javascript.

 // Set variable PHP varaible for fullcalendar.

  $php_var_name = t('REMAINING');
  drupal_add_js(array('myModule' => array('var_name' => $php_var_name)), 'setting');


Now you can use this code in your JS file:

 Drupal.behaviors.myModule =  {
        attach: function (context) {
        console.log(Drupal.settings.myModule.var_name);
     }
  }
http://www.faichi.com/blog/what-are-drupal-behaviors

How To Create A Custom Filter Handler In Views


How about mailchimp ?

