<?php

/**
 * @file
 * Customizations to the Drupal registration system.
 */
/**
 * Returns the list of steps and their associated forms.
 */
function _campusmate_signup_steps() {
  return array(
    1 => array(
      'form' => 'campusmate_signup_profile_info',
    ),
    2 => array(
      'form' => 'campusmate_signup_personal_info',
    ),
    3 => array(
      'form' => 'campusmate_signup_subject_info',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function form_alter_multisteps_form_user_register_form_alter(&$form, &$form_state) {
// Make this a multi-step form.
  if (empty($form_state['step'])) {
    $form_state['step'] = 1;
    $form_state['step_information'] = _campusmate_signup_steps();
  }

  if (!empty($form_state['step']) && $form_state['step'] == 2) {
    campusmate_signup_personal_info($form, $form_state);
  }
  elseif (!empty($form_state['step']) && $form_state['step'] == 3) {
    campusmate_signup_subject_info($form, $form_state);
  } else {
    // Otherwise we build setp one.
    campusmate_signup_profile_info($form, $form_state);
  }
}

/**
 * Step one of user profile info.
 */
function campusmate_signup_profile_info(&$form, &$form_state) {
  //krumo($form);
  //kpr($form);
  // Set the step.
  //$form_state['step'] = 1;

  // Add text for step 1.
  $form['step'] = array(
    '#markup' => '<h3>' . t('Sign up 1/3') . '</h3>',
    '#weight' => -10,
  );
  $form['step-desc'] = array(
    '#markup' => '<p>' . t('Let us know you better!') . '</p>',
    '#weight' => -10,
  );
  //$form['field_user_profile']['und']['#default_value'] = 'student';
   // Set default values (so they validate).
  $form['field_user_profile']['und']['#default_value'] = !empty($form_state['values']['field_user_profile']['und']['0']['value']) ? $form_state['values']['field_user_profile']['und']['0']['value'] : '';
  // Hide the information for step 2.
  $form['account']['#access'] = FALSE;
  $form['field_user_phone']['#access'] = FALSE;
  $form['field_full_name']['#access'] = FALSE;
  // Stop validation.
  unset($form['account']['pass']);
  unset($form['#validate']);

  // Add a next button.
  $form['actions']['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next >>',
    '#submit' => array('campusmate_signup_next_submit'),
  );

  // Remove the 'Create new account' button from step 1.
  unset($form['actions']['submit']);
kpr($form);
}

/**
 * Step two of user Personal info.
 */
function campusmate_signup_personal_info(&$form, &$form_state) {

 // Set the step.
  //$form_state['step'] = 2;

 // Add text for step 1.
  $form['step'] = array(
    '#markup' => '<h3>' . t('Sign up 2/3') . '</h3>',
    '#weight' => -10,
  );
  $form['step-desc'] = array(
    '#markup' => '<p>' . t('Let us know you better!') . '</p>',
    '#weight' => -10,
  );
   // Hide the information for step 1.
  $form['field_user_profile']['#access'] = FALSE;

  // Add a back button.
  $form['actions']['back'] = array(
    '#type' => 'submit',
    '#value' => t('<< Back'),
    '#submit' => array('campusmate_signup_back_submit'),
    '#limit_validation_errors' => array(),
  );

 $form['field_full_name']['und']['#default_value'] = !empty($form_state['values']['field_full_name']['und']['0']['value']) ? $form_state['values']['field_full_name']['und']['0']['value'] : '';

   // Add a next button.
  $form['actions']['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next >>',
    '#submit' => array('campusmate_signup_next_submit'),
  );

  // Adjust the submit button to come last.
  $form['actions']['submit']['#weight'] = 100;
  $form['picture']['#access'] = TRUE;
  // Add our own validation handler.


   // Remove the 'Create new account' button from step 1.
  unset($form['actions']['submit']);

}

/**
 * Step three of user Subject info.
 */
function campusmate_signup_subject_info(&$form, &$form_state) {
 //$form_state['step'] = 3;

  // Add text for step 1.
  $form['step'] = array(
    '#markup' => '<h3>' . t('Sign up 3/3') . '</h3>',
    '#weight' => -10,
  );
  $form['step-desc'] = array(
    '#markup' => '<p>' . t('Let us know you better!') . '</p>',
    '#weight' => -10,
  );

  // Hide the information for step 2.
  $form['account']['#access'] = FALSE;
  $form['field_user_phone']['#access'] = FALSE;
  $form['field_full_name']['#access'] = FALSE;
  $form['field_user_profile']['#access'] = FALSE;

  // Stop validation.
  unset($form['account']['pass']);
  unset($form['#validate']);

  // Add an additional submit handler to the whole form.
  $form['actions']['submit']['#validate'] = array('campusmate_signup_validate');
  $form['#submit'][] = 'campusmate_signup_submit';

}
/**
 * Validate handler.
 */
function campusmate_signup_validate(&$form, &$form_state) {
 /*foreach ($form_state['step_information'] as $key => $value) {
  kpr($form_state);
  if (!empty($value['stored_values']['field_user_profile']['und']['0']['value'])) {
   $form_state['values']['field_user_profile']['und']['0']['value'] = $value['stored_values']['field_user_profile']['und']['0']['value'];
 }
 if (!empty($value['stored_values']['field_user_profile']['und']['0']['value'])) {
   $form_state['values']['field_user_profile']['und']['0']['value'] = $value['stored_values']['field_user_profile']['und']['0']['value'];
 }

}*/
kpr($form_state); exit();
}

/**
 * Submit handler for user registration form.
 *
 * Namespace collision demands underscore.
 */
function campusmate_signup_submit(&$form, &$form_state) {
  foreach ($form_state['step_information'] as $key => $value) {
   if (!empty($value['stored_values ']['field_user_profile']['und']['0']['value'])) {
    echo "string";
    $form_state['values']['field_user_profile']['und']['0']['value'] = $value['stored_values ']['field_user_profile']['und']['0']['value'];
  }

}
kpr($form_state); exit();
}

/**
 * Submit handler for next button.
 *
 * Capture the values from page one and store them away so they can be used
 * at final submit time.
 */
function campusmate_signup_next_submit($form, &$form_state) {
  $current_step = &$form_state['step'];

  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step < count($form_state['step_information'])) {
    $current_step++;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    // Force rebuild with next step.
    $form_state['rebuild'] = TRUE;
   // return;
  }



}

/**
 * Submit handler for the Back button.
 */
function campusmate_signup_back_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['input'];
  if ($current_step > 1) {
    $current_step--;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}
